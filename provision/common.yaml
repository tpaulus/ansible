- name: Set Host TZ
  hosts: all
  become: true

  tasks:
    - name: Set the system time zone to UTC
      community.general.timezone:
        name: UTC
      notify: Restart crond

  handlers:
    - name: Restart crond
      ansible.builtin.service:
        name: cron
        state: restarted

- name: Common Tools
  hosts: device_roles_compute
  become: true

  tasks:
    - name: Install Tools
      ansible.builtin.apt:
        name:
          - net-tools
          - git
          - htop
          - curl
          - jq
          - gpg
        state: present
        update_cache: true

- name: Enable APT on TrueNAS
  hosts: WoodlandPark
  become: true

  tasks:
    - name: Check if /usr/bin/apt is executable
      ansible.builtin.stat:
        path: /usr/bin/apt
      register: apt_file_stat

    - name: Enable APT
      ansible.builtin.command: /usr/bin/install-dev-tools
      changed_when: false
      when: not apt_file_stat.stat.executable

- name: Prom Node Exporter
  hosts:
    - device_roles_compute
    - device_roles_storage
  become: true

  tasks:
    - name: Create the node_exporter group
      ansible.builtin.group:
        name: "node-exp"
        state: present
        system: true

    - name: Create the node_exporter user
      ansible.builtin.user:
        name: "node-exp"
        groups: "node-exp"
        append: true
        shell: /usr/sbin/nologin
        system: true
        create_home: false
        home: /

    - name: Get Latest Node Exporter Version if specific version not pinned
      when: node_exporter_version is not defined
      block:
        - name: Get Node Exporter latest release
          ansible.builtin.uri:
            url: https://api.github.com/repos/prometheus/node_exporter/releases/latest
            return_content: true
          register: node_exporter_release

        - name: Extract Node Exporter version
          ansible.builtin.set_fact:
            node_exporter_version: "{{ node_exporter_release.json.tag_name[1:] }}"

        - name: Print Node Exporter version
          ansible.builtin.debug:
            msg: "Latest Node Exporter version: {{ node_exporter_version }}"

    - name: Install Node Exporter
      ansible.builtin.include_role:
        name: prometheus.prometheus.node_exporter

- name: Configure NTP
  hosts: device_roles_compute
  become: true

  tasks:
    - name: NTP Config
      ansible.builtin.copy:
        content: |
          # Managed by Ansible

          [Time]
          NTP=time.cloudflare.com
          FallbackNTP=pool.ntp.org
        dest: "/etc/systemd/timesyncd.conf"
        mode: "0644"
      notify:
        - Restart NTP

  handlers:
    - name: Restart Chrony
      listen: Restart NTP
      when: ansible_facts['distribution'] in ("Pop!_OS", "Ubuntu")
      ansible.builtin.service:
        enabled: true
        name: chrony
        state: "restarted"

    - name: Restart Timesyncd
      listen: Restart NTP
      when: ansible_facts['distribution'] in ("Debian")
      ansible.builtin.service:
        enabled: true
        name: systemd-timesyncd.service
        state: "restarted"

- name: Configure UPS Monitoring (Primary)
  hosts: racks_MDF:&tags_nut_primary  # NUT Primary in the MDF Rack
  become: true
  vars:
    dir_prefix: "{% if ansible_facts['os_family'] == 'FreeBSD' %}/usr/local{% endif %}"
  tasks:
    - name: Install Dependencies
      ansible.builtin.package:
        name:
          - nut
        state: present
      notify:
        - Enable NUT service

    - name: Ensure NUT Config Dir Exists
      ansible.builtin.file:
        path: "{{ dir_prefix }}/etc/nut"
        state: directory
        mode: '0755'

    - name: Ensure NUT Run Dir Exists
      ansible.builtin.file:
        path: "/var/run/nut"
        owner: 'nut'
        group: 'nut'
        state: directory
        mode: '0755'

    - name: Place Shutdown Script
      ansible.builtin.template:
        dest: "/sbin/ups-shutdown"
        src: "common/ups-shutdown.sh.j2"
        mode: "0755"

    - name: Set NUT Mode
      vars:
        nut_mode: netserver
      ansible.builtin.template:
        dest: "{{ dir_prefix }}/etc/nut/nut.conf"
        src: "common/nut.conf.j2"
        mode: "0644"
      notify:
        - Restart NUT

    - name: Configure UPS to Monitor
      ansible.builtin.template:
        dest: "{{ dir_prefix }}/etc/nut/ups.conf"
        src: "common/ups.conf.j2"
        mode: "0644"
      notify:
        - Restart NUT

    - name: Enable non-localhost access
      ansible.builtin.template:
        dest: "{{ dir_prefix }}/etc/nut/upsd.conf"
        src: "common/upsd.conf.j2"
        mode: "0644"
      notify:
        - Restart NUT

    - name: Configure upsd users
      ansible.builtin.template:
        dest: "{{ dir_prefix }}/etc/nut/upsd.users"
        src: "common/upsd.users.j2"
        mode: "0600"
        owner: 'nut'
        group: 'wheel'
      notify:
        - Restart NUT

    - name: Install upssched CMD Script
      ansible.builtin.template:
        dest: "/usr/local/bin/upssched-cmd"
        src: "common/upssched-cmd.j2"
        mode: "0755"

    - name: Set NUT Server
      vars:
        upssched_enabled: true
      ansible.builtin.template:
        dest: "{{ dir_prefix }}/etc/nut/upsmon.conf"
        src: "common/upsmon-primary.conf.j2"
        mode: "0644"
      notify:
        - Restart NUT

    - name: Configure upssched
      vars:
        shutdown_delay: 360  # 6m
      ansible.builtin.template:
        dest: "{{ dir_prefix }}/etc/nut/upssched.conf"
        src: "common/upssched.conf.j2"
        mode: "0644"
      notify:
        - Restart NUT

  handlers:
    - name: Enable NUT service
      when: ansible_facts['hostname'] == "BeaconHill"
      ansible.builtin.command: sysrc nut_upsmon_enable="YES" nut_enable="YES"
      changed_when: true

    - name: Restart NUT
      ansible.builtin.service:
        enabled: true
        name: "{% if ansible_facts['hostname'] == 'BeaconHill' %}nut{% else %}nut-driver{% endif %}"
        state: "restarted"

- name: Configure UPS Monitoring (Secondary)
  hosts: racks_MDF:!tags_nut_primary  # All nodes in the MDF Rack, except the NUT Primary
  become: true
  vars:
    dir_prefix: "{% if ansible_facts['os_family'] == 'FreeBSD' %}/usr/local{% endif %}"

  tasks:
    - name: Install Dependencies
      ansible.builtin.package:
        name:
          - nut
        state: present
      notify:
        - Enable NUT service

    - name: Ensure NUT Config Dir Exists
      ansible.builtin.file:
        path: "{{ dir_prefix }}/etc/nut"
        state: directory
        mode: '0755'

    - name: Place Shutdown Script
      ansible.builtin.template:
        dest: "/sbin/ups-shutdown"
        src: "common/ups-shutdown.sh.j2"
        mode: "0755"

    - name: Set NUT Mode
      vars:
        nut_mode: netclient
      ansible.builtin.template:
        dest: "{{ dir_prefix }}/etc/nut/nut.conf"
        src: "common/nut.conf.j2"
        mode: "0644"
      notify:
        - Restart NUT

    - name: Install upssched CMD Script
      ansible.builtin.template:
        dest: "/usr/local/bin/upssched-cmd"
        src: "common/upssched-cmd.j2"
        mode: "0755"

    - name: Set NUT Server
      vars:
        upssched_enabled: true
      ansible.builtin.template:
        dest: "{{ dir_prefix }}/etc/nut/upsmon.conf"
        src: "common/upsmon-secondary.conf.j2"
        mode: "0644"
      notify:
        - Restart NUT

    - name: Configure upssched
      vars:
        shutdown_delay: 240  # 4m
      ansible.builtin.template:
        dest: "{{ dir_prefix }}/etc/nut/upssched.conf"
        src: "common/upssched.conf.j2"
        mode: "0644"
      notify:
        - Restart NUT

    - name: Disable NUT Driver
      ansible.builtin.systemd:
        name: "nut-driver"
        enabled: false
        state: "stopped"
        masked: true
      failed_when: false

  handlers:
    - name: Enable NUT service
      when: ansible_facts['hostname'] == "beaconhill"
      ansible.builtin.command: sysrc nut_upsmon_enable="YES" nut_enable="YES"
      changed_when: true

    - name: Restart NUT
      ansible.builtin.service:
        enabled: true
        name: "{% if ansible_facts['hostname'] == 'beaconhill' %}nut{% else %}nut-client{% endif %}"
        state: "restarted"

- name: Configure Unattended Upgrades
  hosts: device_roles_compute
  become: true
  tasks:
    - name: Install Dependencies
      ansible.builtin.apt:
        name:
          - unattended-upgrades
          - apt-config-auto-update
          - apt-listchanges
        state: present
        update_cache: true

    - name: Configure APT
      ansible.builtin.template:
        dest: "/etc/apt/apt.conf.d/20auto-upgrades"
        src: "common/20auto-upgrades.j2"
        mode: "0644"
      notify:
        - Restart unattended-upgrades

    - name: Configure Upgrades
      ansible.builtin.template:
        dest: "/etc/apt/apt.conf.d/50unattended-upgrades"
        src: "common/50unattended-upgrades.j2"
        mode: "0644"
      notify:
        - Restart unattended-upgrades

  handlers:
    - name: Restart unattended-upgrades
      ansible.builtin.service:
        enabled: true
        name: unattended-upgrades
        state: "restarted"

- name: Update MOTD
  hosts: all
  become: true

  tasks:
    - name: Disable Uname banner in PAM
      ansible.builtin.replace:
        path: /etc/pam.d/sshd
        regexp: '^(session\s+optional\s+pam_motd\.so\s+motd=/run/motd\.dynamic.*)$'
        replace: '#\1'
      notify:
        - Restart sshd

    - name: Update MOTD
      ansible.builtin.template:
        src: motd.j2
        dest: "{{ '/var/run/motd' if ansible_facts['os_family'] == 'FreeBSD' else '/etc/motd' }}"
        mode: "0644"
      vars:
        netbox_url: "https://netbox.whitestar.systems/dcim/devices/{{ netbox_device_id }}/"

  handlers:
    - name: Restart sshd
      ansible.builtin.service:
        name: sshd
        state: restarted
